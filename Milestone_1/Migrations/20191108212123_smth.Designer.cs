// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Milestone_1.Data;

namespace Milestone_1.Migrations
{
    [DbContext(typeof(TwitterContext))]
    [Migration("20191108212123_smth")]
    partial class smth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099");

            modelBuilder.Entity("Milestone_1.models.Comment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("TweetForeignKey");

                    b.Property<int>("UserDataId");

                    b.Property<string>("commentText");

                    b.HasKey("id");

                    b.HasIndex("TweetForeignKey");

                    b.HasIndex("UserDataId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("Milestone_1.models.Followers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("UserDataId");

                    b.Property<int>("UserToFollowForeignKey");

                    b.HasKey("id");

                    b.HasIndex("UserDataId");

                    b.HasIndex("UserToFollowForeignKey");

                    b.ToTable("followers");
                });

            modelBuilder.Entity("Milestone_1.models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("discription");

                    b.Property<string>("name");

                    b.HasKey("GroupId");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("Milestone_1.models.Tweets", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GroupForeignKey");

                    b.Property<int>("UserDataForeignKey");

                    b.Property<DateTime>("post_date");

                    b.Property<string>("tweetText");

                    b.HasKey("id");

                    b.HasIndex("GroupForeignKey");

                    b.HasIndex("UserDataForeignKey");

                    b.ToTable("tweets");
                });

            modelBuilder.Entity("Milestone_1.models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("login");

                    b.Property<string>("password");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Milestone_1.models.UserData", b =>
                {
                    b.Property<int>("UserDataId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("UserForeignKey");

                    b.Property<string>("city");

                    b.Property<string>("country");

                    b.Property<string>("gender");

                    b.Property<string>("name");

                    b.Property<string>("surname");

                    b.HasKey("UserDataId");

                    b.HasIndex("UserForeignKey")
                        .IsUnique();

                    b.ToTable("userDatas");
                });

            modelBuilder.Entity("Milestone_1.models.UserDataGroup", b =>
                {
                    b.Property<int>("UserDataForeignKey");

                    b.Property<int>("GroupForeignKey");

                    b.Property<int?>("UserForeignKey");

                    b.HasKey("UserDataForeignKey", "GroupForeignKey");

                    b.HasIndex("GroupForeignKey");

                    b.ToTable("userDataGroups");
                });

            modelBuilder.Entity("Milestone_1.models.Comment", b =>
                {
                    b.HasOne("Milestone_1.models.Tweets", "Tweets")
                        .WithMany("Comments")
                        .HasForeignKey("TweetForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Milestone_1.models.UserData", "UserData")
                        .WithMany()
                        .HasForeignKey("UserDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Milestone_1.models.Followers", b =>
                {
                    b.HasOne("Milestone_1.models.UserData", "UserData")
                        .WithMany("Followers")
                        .HasForeignKey("UserDataId");

                    b.HasOne("Milestone_1.models.User", "UserToFollow")
                        .WithMany()
                        .HasForeignKey("UserToFollowForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Milestone_1.models.Tweets", b =>
                {
                    b.HasOne("Milestone_1.models.Group", "Group")
                        .WithMany("Tweets")
                        .HasForeignKey("GroupForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Milestone_1.models.UserData", "UserData")
                        .WithMany("Tweets")
                        .HasForeignKey("UserDataForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Milestone_1.models.UserData", b =>
                {
                    b.HasOne("Milestone_1.models.User", "User")
                        .WithOne("UserData")
                        .HasForeignKey("Milestone_1.models.UserData", "UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Milestone_1.models.UserDataGroup", b =>
                {
                    b.HasOne("Milestone_1.models.Group", "Group")
                        .WithMany("UserDataGroups")
                        .HasForeignKey("GroupForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Milestone_1.models.UserData", "UserData")
                        .WithMany("UserDataGroups")
                        .HasForeignKey("UserDataForeignKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
